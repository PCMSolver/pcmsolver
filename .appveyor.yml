# Current software used:
# OS: 64-bit Windows Server 2012 R2
# Compilers: 64-bit MinGw-w64 5.1.0 (downloaded during script execution)
# Python: 2.7, both 32-bit and 64-bit versions
# Python: 3.4, both 32-bit and 64-bit versions
#
# Notes:
# Where "ps:" is used commands are executed in PowerShell

# build version format: 1, 2, ...
version: '{build}-{branch}'

# branches to build
branches:
  only:
    - fix-appveyor

os: Windows Server 2012 R2

platform: x86

build:
  verbosity: detailed

# prepare environment
environment:
  # set custom path (will be more extended later in build_script section)
  #path: C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Git\cmd;C:\Program Files\7-Zip;C:\Program Files (x86)\CMake\bin
  # set MinGw-w64 (64-bit) version 5.1.0 download URL
  url: http://kent.dl.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/5.1.0/threads-posix/seh/x86_64-5.1.0-release-posix-seh-rt_v4-rev0.7z
  # user can possibly use different Python versions, we try to test multiple cases
  # 64-bit version on 64-bit system allows easier installation of Python packages using .exe installers
  # and better CMake automatic detection of some Python tools
  GENERATOR: "MinGW Makefiles"
  BUILDFLAGS: "--jobs=2 VERBOSE=1"
  matrix:
    # Python 2.7; 32-bit version
    - python: C:\Python27;C:\Python27\Scripts
    # Python 2.7; 64-bit version
    - python: C:\Python27-x64;C:\Python27-x64\Scripts
    # Python 3.4; 32-bit version
    - python: C:\Python34;C:\Python34\Scripts
    # Python 3.4; 64-bit version
    - python: C:\Python34-x64;C:\Python34-x64\Scripts

before_build:
  # add location of used Python to path
  - set path=%path%;%python%
  # create dir for custom software and move there
  - mkdir C:\software && cd C:\software
  # download and unpack MinGW-w64 compilers
  - ps: wget $env:url -OutFile MinGW.7z
  - 7z x MinGW.7z > NUL
  # add compilers binary dir to the path
  - set path=%path%;C:\software\mingw64\bin
  #  download and unpack the ZLIB library
  - ps: wget http://web-docs.gsi.de/~milias/zlib/zlib-1.2.5-bin-x64.zip -OutFile zlib-1.2.5-bin-x64.zip
  - dir
  - 7z x zlib-1.2.5-bin-x64.zip
  - dir
  - dir zlib
  # add library to the path
  - set path=%path%;C:\software\zlib
  # download and upgrade pip
  - ps: wget https://bootstrap.pypa.io/get-pip.py -OutFile get-pip.py
  - python get-pip.py
  # go back to project source dir
  - cd %APPVEYOR_BUILD_FOLDER%
  # Workaround for CMake not wanting sh.exe on PATH for MinGW
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - python setup.py --generator="%GENERATOR%"
  - cd build

build_script:
  - cmake --build . -- %BUILDFLAGS%

test_script:
  - ctest --parallel 2 --output-on-failure --dashboard Experimental --verbose --track AppVeyorCI

notifications:
  - provider: Slack
    auth_token:
      secure: VLVjYQBw88CNVOGgUKbr3iTvw9eHn3C/kl3eGC0iTkAgdpu0ZpbpNofRSP0YOIXDa7on/XfTrc3wYoIA9EwlWg==
    channel: ci-builds
