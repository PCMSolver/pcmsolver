function(configure_script infile outfile)
    configure_file(${infile} ${outfile} @ONLY)
    execute_process(COMMAND
        chmod 755 ${outfile} OUTPUT_QUIET)
endfunction()

function(get_cpp_sources list_of_sources)
        file(GLOB _listcpp *.cpp)
        foreach(file_path ${_listcpp})
        	get_filename_component(dir_path ${file_path} NAME)
        	list(APPEND list_of_sources ${dir_path})
        endforeach()
	list(REMOVE_DUPLICATES list_of_sources)
	set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_c_sources list_of_sources)
        file(GLOB _listc *.c)
        foreach(file_path ${_listc})
        	get_filename_component(dir_path ${file_path} NAME)
        	list(APPEND list_of_sources ${dir_path})
        endforeach()
	list(REMOVE_DUPLICATES list_of_sources)
	set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_fortran_sources list_of_sources)
        file(GLOB _listfortran *.F *.f *.F90 *.f90)
        foreach(file_path ${_listfortran})
        	get_filename_component(dir_path ${file_path} NAME)
        	list(APPEND list_of_sources ${dir_path})
        endforeach()
	list(REMOVE_DUPLICATES list_of_sources)
	set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_hpp_headers list_of_headers)
        file(GLOB _listhpp *.hpp)
        foreach(file_path ${_listhpp})
        	get_filename_component(dir_path ${file_path} NAME)
        	list(APPEND list_of_headers ${dir_path})
        endforeach()
	list(REMOVE_DUPLICATES list_of_headers)
	set(${list_of_headers} PARENT_SCOPE)
endfunction()

function(get_h_headers list_of_headers)
        file(GLOB _listh *.h)
        foreach(file_path ${_listh})
        	get_filename_component(dir_path ${file_path} NAME)
        	list(APPEND list_of_headers ${dir_path})
        endforeach()
	list(REMOVE_DUPLICATES list_of_headers)
	set(${list_of_headers} PARENT_SCOPE)
endfunction()

# Convenient wrapper for the install(FILES ... DESTINATION ...) command
# for a list of elements (we tipically use it for header files)
macro(install_list_FILES list_of_files where)
	foreach(filename ${list_of_files})
		install(FILES ${filename} DESTINATION ${where})
	endforeach()
endmacro()

macro(write_to_Includer headers_list)
	foreach(header ${headers_list})
        	file(APPEND ${PROJECT_BINARY_DIR}/include/Includer.hpp "#include \"${header}\"\n")
        endforeach()
endmacro()

macro(write_to_cloc_list list_of_sources)
	get_filename_component(lib ${CMAKE_CURRENT_SOURCE_DIR} NAME)
	if(EXISTS "${PROJECT_BINARY_DIR}/cloc/cloc_list-${lib}")
		file(REMOVE ${PROJECT_BINARY_DIR}/cloc/cloc_list-${lib})
	endif()
	foreach(source ${list_of_sources})
		file(APPEND ${PROJECT_BINARY_DIR}/cloc/cloc_list-${lib} "${PROJECT_SOURCE_DIR}/src/${lib}/${source}\n")
        endforeach()
endmacro()

# Generate the FCMangle header and post-process it to add the copyright notice
macro(init_FCMangle)
	FortranCInterface_HEADER(${PROJECT_BINARY_DIR}/include/FCMangle.hpp)
	file(STRINGS ${PROJECT_BINARY_DIR}/include/FCMangle.hpp contents NEWLINE_CONSUME)
        file(WRITE ${PROJECT_BINARY_DIR}/include/FCMangle.hpp
        		"/* pcmsolver_copyright_start */\n/* pcmsolver_copyright_end */\n\n")
        file(APPEND ${PROJECT_BINARY_DIR}/include/FCMangle.hpp "// Header file automagically generated by CMake. DO NOT TOUCH!\n")
        file(APPEND ${PROJECT_BINARY_DIR}/include/FCMangle.hpp ${contents})
endmacro()

# Generate the Includer header and post-process it to add the copyright notice
macro(init_Includer)
	# Initialize Includer.hpp header
	file(WRITE ${PROJECT_BINARY_DIR}/include/Includer.hpp
		"/* pcmsolver_copyright_start */\n/* pcmsolver_copyright_end */\n\n")
	file(APPEND ${PROJECT_BINARY_DIR}/include/Includer.hpp "// Header file automagically generated by CMake. DO NOT TOUCH!\n")
	execute_process(COMMAND python "${PROJECT_BINARY_DIR}/bin/update_copyright.py" 
		        "--lang=CXX" "Includer.hpp"
		        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/include)
endmacro()

# This macro configures all files that depend on some variables known only when 
# the setup script or CMake are run
macro(configure_files)
	# Configure the header with library-wide preprocessor definitions
	configure_file(${PROJECT_SOURCE_DIR}/Config.hpp.in
               ${PROJECT_BINARY_DIR}/include/Config.hpp)
       # Configure the source file for the input managing class
       configure_file(${PROJECT_SOURCE_DIR}/src/utils/Input.cpp.in
	       ${PROJECT_SOURCE_DIR}/src/utils/Input.cpp)
	# Configure the input parsing script
	configure_file(${PROJECT_SOURCE_DIR}/tools/pcmsolver.py.in pcmsolver.py)
        file(COPY ${PROJECT_BINARY_DIR}/pcmsolver.py 
          DESTINATION ${PROJECT_BINARY_DIR}/bin
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
          GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
  	# Configure the touch_cmakelists utility script
        configure_file(${PROJECT_SOURCE_DIR}/tools/touch_cmakelists.py.in touch_cmakelists.py)
        file(COPY ${PROJECT_BINARY_DIR}/touch_cmakelists.py 
          DESTINATION ${PROJECT_BINARY_DIR}/bin
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
          GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
  	# Configure the update_gh-pages utility script
        configure_file(${PROJECT_SOURCE_DIR}/tools/update_gh-pages.py.in update_gh-pages.py)
        file(COPY ${PROJECT_BINARY_DIR}/update_gh-pages.py 
          DESTINATION ${PROJECT_BINARY_DIR}/bin
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
          GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
  	# Configure the counter utility script
        configure_file(${PROJECT_SOURCE_DIR}/tools/counter.py.in counter.py)
        file(COPY ${PROJECT_BINARY_DIR}/counter.py 
          DESTINATION ${PROJECT_BINARY_DIR}/bin
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
          GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
  	# Configure the extract_notice utility script
        configure_file(${PROJECT_SOURCE_DIR}/tools/extract_notice.py.in extract_notice.py)
        file(COPY ${PROJECT_BINARY_DIR}/extract_notice.py 
          DESTINATION ${PROJECT_BINARY_DIR}/bin
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
          GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
  	# Configure the update_copyright utility script
        configure_file(${PROJECT_SOURCE_DIR}/tools/update_copyright.py.in update_copyright.py)
        file(COPY ${PROJECT_BINARY_DIR}/update_copyright.py 
          DESTINATION ${PROJECT_BINARY_DIR}/bin
          FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ
          GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
        # Insert copyright notice on automagically generated header files
	execute_process(COMMAND python "${PROJECT_BINARY_DIR}/bin/update_copyright.py" 
		        "--lang=CXX" "FCMangle.hpp"
            		WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/include)
endmacro()
