if(NOT DEFINED DEFUALT_CXX_FLAGS_SET OR RESET_FLAGS)
  if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
      if(HAS_CXX11_SUPPORT)
	      set(CMAKE_CXX_FLAGS "-fPIC ${CXX11_COMPILER_FLAGS}")
      else()
	      set(CMAKE_CXX_FLAGS "-fPIC -std=gnu++98")
      endif()
      set(CMAKE_CXX_FLAGS_DEBUG   "-O0 -g3 -DDEBUG -Wall -Wextra -Winit-self -Woverloaded-virtual -Wuninitialized -Wmissing-declarations -Wwrite-strings")
      set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -Wno-unused")
      if(ENABLE_VECTORIZATION)
	      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX_ARCHITECTURE_FLAGS} ${DEFINITIONS}")
      endif()	      
      if(ENABLE_CODE_COVERAGE)
          set(CMAKE_CXX_FLAGS      "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
	  set(CMAKE_CXX_LINK_FLAGS "-fprofile-arcs -ftest-coverage")
      endif()	  
  endif()

  if(CMAKE_CXX_COMPILER_ID MATCHES Intel)
      # Compilation of Boost uncovers some bugs with Intel's support for C++11
      # For Intel compilers older that 14.0.0 continue using -std=gnu++98
      execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE ICPC_VERSION)
      if(ICPC_VERSION VERSION_LESS 14.0.0)
	  set(CMAKE_CXX_FLAGS "-fPIC -std=gnu++98")
      else()
          if(HAS_CXX11_SUPPORT)                                        
                  set(CMAKE_CXX_FLAGS "-fPIC ${CXX11_COMPILER_FLAGS}")
          else()
                  set(CMAKE_CXX_FLAGS "-fPIC -std=gnu++98")
          endif()
      endif()
      set(CMAKE_CXX_FLAGS_DEBUG   "-O0 -debug -DDEBUG -Wall -Wuninitialized -Wno-unknown-pragmas") # -Weffc++")
      set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
      set(CMAKE_CXX_LINK_FLAGS    "-shared-intel")
      if(ENABLE_VECTORIZATION)
	      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX_ARCHITECTURE_FLAGS} ${DEFINITIONS}")
      endif()	      
  endif()
  
  if(CMAKE_CXX_COMPILER_ID MATCHES PGI)
      # Apparently PGI doesn't let you decide which standard to use...
      # The main problem with PGI is compiling Eigen.
      # Assertions have to be disabled (-DNDEBUG) and optimization level has to
      # be low (-O1)
      # It is impossible to compile and/or run tests otherwise!!!
      set(CMAKE_CXX_FLAGS "-fPIC -DNDEBUG")
      if(ENABLE_64BIT_INTEGERS)
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
      else()
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
      endif()
      set(CMAKE_CXX_FLAGS_DEBUG   "-g -O0")
      set(CMAKE_CXX_FLAGS_RELEASE "-O1")
  endif()
  
  if(CMAKE_CXX_COMPILER_ID MATCHES XL)
	  set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -g")
	  set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG} -O0")
	  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
  endif()
  
  if(CMAKE_CXX_COMPILER_ID MATCHES Clang)
      if(HAS_CXX11_SUPPORT)
	      set(CMAKE_CXX_FLAGS "-fPIC ${CXX11_COMPILER_FLAGS}")
      else()
	      set(CMAKE_CXX_FLAGS "-fPIC -std=gnu++98")
      endif()
      set(CMAKE_CXX_FLAGS_DEBUG    "-O0 -g -DDEBUG -Wall -Wextra -Winit-self -Woverloaded-virtual -Wuninitialized -Wmissing-declarations -Wwrite-strings -Weffc++ -Wdocumentation")
      set(CMAKE_CXX_FLAGS_RELEASE  "-O3 -DNDEBUG -Wno-unused")
      if(ENABLE_VECTORIZATION)
	      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX_ARCHITECTURE_FLAGS} ${DEFINITIONS}")
      endif()	      
  endif()

  save_compiler_flags(CXX)

endif ()
