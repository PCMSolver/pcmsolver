/** \page Maintenance Maintenance 

Description and how-to for maintenance operations

## Updating Eigen distribution 

The C++ linear algebra library Eigen comes bundled with the module. To update the distributed version one has to:
1. download the desired version of the library to a scratch location. Eigen's website is: http://eigen.tuxfamily.org/
2. unpack the downloaded archive;
3. go into the newly created directory and create a build directory;
4. go into the newly created build directory and type the following (remember to substitute @CMAKE_SOURCE_DIR@ with the actual path)

	cmake .. -DCMAKE_INSTALL_PREFIX=@CMAKE_SOURCE_DIR@/external/eigen3

Remember to commit and push your modifications.

## Updating the copyright notice

The copyright notice text is in the file `copyright_notice.txt` in the `tools` directory.
The scritp `update_copyright.py`, which is configured by CMake from `tools/update_copyright.py.in`, will extract the
text from the file, create the appropriate header and perform the update on the files in the subdirectory where it is invoked.
\warning The copyright notice on top of the Config.hpp.in file needs to be **manually** updated!

## Release process

The release process is currently a bit cumbersome. We have two repositories one public for the release, hosted by GitHub
[here](https://github.com/PCMSolver/pcmsolver) and one private for the development, hosted by CTCC [here](https://repo.ctcc.no/).
Development code, i.e. code not be compiled in a release, is marked by the preprocessor definition `DEVELOPMENT_CODE`. Such a
macro is also known to CMake.
\warning It is to be preferred to exclude code from compilation at the CMake level, not directly inside the code with preprocessor
`ifdef` blocks. In fact, if the code is loosely coupled, there would be no need at all to use the preprocessor definition
inside the code! It is currently only used in `interface/Inteface.cpp`.

The process differs in case you want to release previously unreleased functionality or you want to keep some functionality
still unreleased.

### Add previously unreleased functionality

Once you have your code properly marked, compiling and thoroughly tested **on your branch**, you will first need to merge it with
the `master` branch. If it compiles and all the unit tests pass, remove the marking from all the `CMakeLists.txt` and within the
code. You can now merge the `master` branch with the `release` branch. 
\warning **NEVER** merge `release` into `master`!!!

You then need to compile the to-be-released code and run the unit test suite. 
If compilation works and all unit tests are passing then the code is ready to be released:

	git push Origin release

Notice that `Origin` has been spelled with a capital `O` the reason being that the release branch gets pushed both to the private
and the public repositories (trick explained [here](http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations))


### Remove functionality not to be released

Switch to the `release` branch and merge it with `master`.
\warning **NEVER** merge `release` into `master`!!!

You will have to **remove** (`git rm`) the directories/files that should not be in the release.

You then need to compile the to-be-released code and run the unit test suite. 
If compilation works and all unit tests are passing then the code is ready to be released:

	git push Origin release

Notice that `Origin` has been spelled with a capital `O` the reason being that the release branch gets pushed both to the private
and the public repositories (trick explained [here](http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations))


*/
