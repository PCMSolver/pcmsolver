#!/usr/bin/env python


#
#  PCMSolver, an API for the Polarizable Continuum Model
#  Copyright (C) 2017 Roberto Di Remigio, Luca Frediani and collaborators.
#
#  This file is part of PCMSolver.
#
#  PCMSolver is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  PCMSolver is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with PCMSolver.  If not, see <http://www.gnu.org/licenses/>.
#
#  For information on the complete list of contributors to the
#  PCMSolver API, see: <http://pcmsolver.readthedocs.io/>
#

# -*- coding: utf-8 -*-
#
# PCMSolver documentation build configuration file, created by
# sphinx-quickstart on Mon Oct 26 15:18:26 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import re

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinxcontrib.bibtex',
    'breathe'
]
breathe_projects = { 'PCMSolver': 'xml' }
breathe_default_project = 'PCMSolver'
breathe_default_members = ('members', 'protected-members', 'private-members')

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']

# Markdown support

from recommonmark.parser import CommonMarkParser

# The suffix of source filenames.
source_suffix = ['.rst', '.md']

source_parsers = {
            '.md': CommonMarkParser,
            }

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'PCMSolver'
copyright = '2015, Roberto Di Remigio, Luca Frediani, Krzysztof Mozgawa'
author = 'Roberto Di Remigio, Luca Frediani, Krzysztof Mozgawa'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# Read version from file
# Get project version
with open('../README.md') as f:
    content = f.read().replace('\n', '')
pcmsolver_version = re.search('[0-9]\.[0-9]\.[0-9]', content).group(0)
major = pcmsolver_version.split('.')[0]
minor = pcmsolver_version.split('.')[1]
patch = pcmsolver_version.split('.')[2]

version = pcmsolver_version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
import sphinx_rtd_theme
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = 'gfx/logo.jpg'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'PCMSolverdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  (master_doc, 'PCMSolver.tex', 'PCMSolver Documentation',
   'Roberto Di Remigio, Luca Frediani, Krzysztof Mozgawa', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pcmsolver', 'PCMSolver Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  (master_doc, 'PCMSolver', 'PCMSolver Documentation',
   author, 'PCMSolver', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def run_doxygen(folder):
    """Run the doxygen make command in the designated folder"""

    import subprocess
    try:
        retcode = subprocess.call("cd %s; doxygen" % folder, shell=True)
        if retcode < 0:
            sys.stderr.write("doxygen terminated by signal %s" % (-retcode))
    except OSError as e:
        sys.stderr.write("doxygen execution failed: %s" % e)


def generate_doxygen_xml(app):
    """Run the doxygen make commands if we're on the ReadTheDocs server"""

    read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

    if read_the_docs_build:
        run_doxygen(os.getcwd())


def remove(obj):
    import os
    import shutil
    if os.path.isdir(obj):
        try:
            shutil.rmtree(obj)
        except OSError:
            pass
    else:
        try:
            os.remove(obj)
        except OSError:
            pass


def configure_file(rep, fname, **kwargs):
    import os
    import re
    r''' Configure a file.

    :param rep:
       a (placeholder : replacement) dictionary
    :param fname:
       name of the file to be configured, without suffix
    :param \**kwargs:
       See below

    :Keyword arguments:
       * *in_path*  -- directory for the unconfigured file
       * *suffix*   -- suffix of the unconfigured file, with separators
       * *prefix*   -- prefix for the configured file
       * *out_path* -- directory for the configured file
    '''
    in_path = kwargs.get('in_path', os.getcwd())
    suffix = kwargs.get('suffix', '.in')
    out_path = kwargs.get('out_path', in_path)
    prefix = kwargs.get('prefix', '')
    fname_in = fname + suffix
    f = open(os.path.join(in_path, fname_in), 'r')
    filedata = f.read()
    f.close()
    rep = dict((re.escape(k), v) for k, v in rep.items())
    pattern = re.compile("|".join(list(rep.keys())))
    filedata = pattern.sub(lambda m: rep[re.escape(m.group(0))], filedata)
    fname_out = prefix + fname
    f = open(os.path.join(out_path, fname_out), 'w+')
    f.write(filedata)
    f.close()


def generate_bar_charts(mod_dir, dir_lang, savedir):
    r'''Generate lines-of-code bar charts.

    :param mod_dir:
       location of the cloc_tools module
    :param dir_lang:
       a (directory : language) dictionary
    :param savedir:
       location of the YAML files
    '''
    import sys
    sys.path.append(mod_dir)
    from cloc_tools import bar_chart
    # Generate scripts and list of scripts (absolute paths)
    list_of_scripts = [bar_chart(root_dir, language, savedir) for root_dir, language in dir_lang.items()]
    # Generate charts
    for fname in list_of_scripts:
        exec(compile(open(fname).read(), fname, 'exec'))


def setup(app):

    from pygments.lexers import get_lexer_for_filename
    # We first need to define some directories:
    # project_root_dir -- the root of the project
    # project_src_dir  -- source code location: os.path.join(project_root_dir, 'src')
    # project_doc_dir  -- .rst location: os.path.join(project_root_dir, 'doc')
    if (os.environ.get('READTHEDOCS', None) == 'True'):
        project_root_dir = os.path.abspath(os.pardir)
        project_doc_dir = os.getcwd()
        project_src_dir = os.path.join(project_root_dir, 'src')
    else:
        project_root_dir = os.getcwd()
        project_doc_dir  = os.path.join(project_root_dir, 'doc')
        project_src_dir  = os.path.join(project_root_dir, 'src')
    print(('Project root directory {}'.format(project_root_dir)))
    print(('Project doc directory {}'.format(project_doc_dir)))
    print(('Project src directory {}'.format(project_src_dir)))

    # Clean up leftovers
    print('Clean up leftovers from previous build')
    [remove(os.path.join(project_doc_dir, x.strip())) for x in open(os.path.join(project_doc_dir, '.gitignore'))]
    # Configure Doxyfile.in
    dot_path = os.path.split(which('dot'))[0] if which('dot') else ''
    rep = { '@PROJECT_VERSION_MAJOR@' : major,
            '@PROJECT_VERSION_MINOR@' : minor,
            '@PROJECT_VERSION_PATCH@' : patch,
            '@PROJECT_SOURCE_DIR@'    : project_root_dir,
            '@DOXYGEN_DOT_PATH@'      : dot_path
          }
    configure_file(rep, 'Doxyfile', in_path=project_doc_dir, suffix='.in')
    # Make a copy of api/pcmsolver.h and strip it of all
    # PCMSolver_API markers in front of function signatures
    rep = { 'PCMSolver_API ' : '' }
    configure_file(rep, 'pcmsolver.h',
                   in_path=os.path.join(project_root_dir, 'api'),
                   suffix='', prefix='mock_', out_path=project_doc_dir)
    # Configure cloc_tools.py.in
    rep = { '@PYTHON_EXECUTABLE@'  : sys.executable,
            '@PROJECT_SOURCE_DIR@' : project_root_dir,
            '@PROJECT_BINARY_DIR@' : project_root_dir,
            '@PERL_EXECUTABLE@'    : which('perl')
          }
    configure_file(rep, 'cloc_tools.py', in_path=os.path.join(project_doc_dir, 'gfx'),
                   suffix='.in', out_path=project_doc_dir)
    # Generate directories list (full paths), remove bin using filter
    d = [y for y in [os.path.join(root, x) for root, dirs, _ in os.walk(project_src_dir) for x in dirs] if y != os.path.join(project_src_dir, 'bin')]
    # Remove 'CMakeLists.txt' from sublists using filter
    f = [[z for z in [y for y in [x for x in os.listdir(l) if os.path.isfile(os.path.join(l, x))] if y != 'CMakeLists.txt'] if not z.endswith('.mod')] for l in d]
    # Take first element in each sublist
    f = [x[0] for x in f]
    # Apply map to get language name
    l = [get_lexer_for_filename(x).name for x in f]
    # Finally zip d and f into the dir_lang dictionary
    dir_lang = dict(list(zip(d, l)))
    generate_bar_charts(project_doc_dir, dir_lang, project_doc_dir)

    if (os.environ.get('READTHEDOCS', None) == 'True'):
        # Add hook for building doxygen xml when needed
        app.connect("builder-inited", generate_doxygen_xml)
    else:
        run_doxygen(project_doc_dir)
