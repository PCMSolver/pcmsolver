#!@PYTHON_EXECUTABLE@



#
#  PCMSolver, an API for the Polarizable Continuum Model
#  Copyright (C) 2018 Roberto Di Remigio, Luca Frediani and collaborators.
#
#  This file is part of PCMSolver.
#
#  PCMSolver is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  PCMSolver is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with PCMSolver.  If not, see <http://www.gnu.org/licenses/>.
#
#  For information on the complete list of contributors to the
#  PCMSolver API, see: <http://pcmsolver.readthedocs.io/>
#

# -*- python -*-
# -*- coding: utf-8 -*-
# vim:filetype=python:
# Execute cloc.pl Perl script and wrap results in a nicer format.
# cloc script by Al Danial, available at http://cloc.sourceforge.net/
# licensed under the GNU General Public License v2
# (c) Roberto Di Remigio  <roberto.d.remigio@uit.no>
# licensed under the GNU Lesser General Public License

from __future__ import print_function

def cloc_command(perl, cloc_script, files, *args):
    """Wrapper to the cloc.pl Perl script.

    Keyword arguments:
    perl -- perl executable
    cloc_script -- the cloc.pl script
    args -- additional command line arguments to cloc.pl
    """
    import subprocess
    return subprocess.check_output([perl, cloc_script] + [str(f).strip() for f in files] + list(args), shell=False)


def bar_chart(dirname, language, savedir):
    """Generates matplotlib script for lines of code bar chart.

    Keyword arguments:
    dirname -- directory where the lines of code counting has to take place
    language -- the programming language of the source files: C++, C or Fortran
    savedir -- where YAML files are to be saved
    """
    import glob
    import os
    tag = os.path.basename(dirname)
    root_dir = '@PROJECT_BINARY_DIR@/doc/gfx/matplotlib'
    if not os.path.exists(root_dir):
        os.makedirs(root_dir)
    plot_script = root_dir + '/' + tag + '.py'
    bar_plot = open(plot_script, 'w+')
    print_header(bar_plot)
    # Language specific part: counting and printing data to the script
    if (language == 'C++'):
        data = count_CXX(sorted(glob.glob(dirname + '/*.hpp')),
                         sorted(glob.glob(dirname + '/*.cpp')), savedir)
        print_data_CXX(data, tag, bar_plot)
    elif (language == 'C'):
        data = count_C(sorted(glob.glob(dirname + '/*.h')),
                       sorted(glob.glob(dirname + '/*.c')), savedir)
        print_data_C(data, tag, bar_plot)
    else:
        data = count_Fortran(sorted(glob.glob(dirname + '/*.F90')) +
                             sorted(glob.glob(dirname + '/*.f90')) +
                             sorted(glob.glob(dirname + '/*.F77')) +
                             sorted(glob.glob(dirname + '/*.f77')), savedir)
        print_data_Fortran(data, tag, bar_plot)
    # Print body of the script
    print_script(bar_plot)
    bar_plot.close()
    return plot_script


def count_CXX(headers, sources, savedir):
    """Counts lines of C++ source code.

    Keyword arguments:
    headers -- list of header files
    sources -- list of source files
    savedir -- where to save the YAML output
    """
    import os
    hpp_yml = os.path.join(savedir, 'scratch_hpp.yml')
    cpp_yml = os.path.join(savedir, 'scratch_cpp.yml')
    if headers:
        cloc_wrapper(headers, hpp_yml)
    if sources:
        cloc_wrapper(sources, cpp_yml)
    return process_YAML_CXX(hpp_yml, cpp_yml)


def count_C(headers, sources, savedir):
    """Counts lines of C source code.

    Keyword arguments:
    headers -- list of header files
    sources -- list of source files
    savedir -- where to save the YAML output
    """
    import os
    h_yml = os.path.join(savedir, 'scratch_h.yml')
    c_yml = os.path.join(savedir, 'scratch_c.yml')
    if headers:
        cloc_wrapper(headers, h_yml)
    if sources:
        cloc_wrapper(sources, c_yml)
    return process_YAML_C(h_yml, c_yml)


def count_Fortran(sources, savedir):
    """Counts lines of Fortran source code.

    Keyword arguments:
    source -- list of source files
    savedir -- where to save the YAML output
    """
    import os
    f_yml = os.path.join(savedir, 'scratch_fortran.yml')
    cloc_wrapper(sources, f_yml)
    return process_YAML_Fortran(f_yml)


def cloc_wrapper(files, ofile):
   """Counts lines of code in files listed.

    Keyword arguments:
    files -- list of source code files
    ofile -- name of the output file
   """
   import tempfile
   out = cloc_command('@PERL_EXECUTABLE@', '@PROJECT_SOURCE_DIR@/doc/gfx/cloc.pl', files, '--yaml')
   temp = tempfile.TemporaryFile()
   try:
       temp.write(out)
       temp.seek(0)
       lines = temp.readlines()
       outfile = open(ofile, 'wb')
       outfile.writelines(lines[6:])
       outfile.close()
   finally:
       temp.close()


def process_YAML_CXX(cloc_hpp, cloc_cpp):
    """Counts lines of code in files listed.

    Keyword arguments:
    cloc_hpp -- YAML output file from cloc.pl for header files
    cloc_cpp -- YAML output file from cloc.pl for source files
    """
    from yaml import load, dump
    try:
        from yaml import CLoader as Loader, CDumper as Dumper
    except ImportError:
        from yaml import Loader, Dumper
    import os
    # Import YAML file and get relevant data
    hpp_files   = 0
    hpp_blank   = 0
    hpp_comment = 0
    hpp_code    = 0
    try:
        data = load(open(cloc_hpp, 'r'), Loader=Loader)
        hpp_files   = data['C/C++ Header']['nFiles']
        hpp_blank   = data['C/C++ Header']['blank']
        hpp_comment = data['C/C++ Header']['comment']
        hpp_code    = data['C/C++ Header']['code']
    except IOError:
        pass
    # Import YAML file and get relevant data
    cpp_files   = 0
    cpp_blank   = 0
    cpp_comment = 0
    cpp_code    = 0
    try:
        data = load(open(cloc_cpp, 'r'), Loader=Loader)
        cpp_files   = data['C++']['nFiles']
        cpp_blank   = data['C++']['blank']
        cpp_comment = data['C++']['comment']
        cpp_code    = data['C++']['code']
    except IOError:
        pass
    return [hpp_files, hpp_blank, hpp_comment, hpp_code,
            cpp_files, cpp_blank, cpp_comment, cpp_code]


def process_YAML_C(cloc_h, cloc_c):
    """Counts lines of code in files listed.

    Keyword arguments:
    cloc_h -- YAML output file from cloc.pl for header files
    cloc_c -- YAML output file from cloc.pl for source files
    """
    from yaml import load, dump
    try:
        from yaml import CLoader as Loader, CDumper as Dumper
    except ImportError:
        from yaml import Loader, Dumper
    # Import YAML file and get relevant data
    h_files   = 0
    h_blank   = 0
    h_comment = 0
    h_code    = 0
    try:
       data = load(open(cloc_h, 'r'), Loader=Loader)
       h_files   = data['C/C++ Header']['nFiles']
       h_blank   = data['C/C++ Header']['blank']
       h_comment = data['C/C++ Header']['comment']
       h_code    = data['C/C++ Header']['code']
    except IOError:
        pass
    # Import YAML file and get relevant data
    c_files   = 0
    c_blank   = 0
    c_comment = 0
    c_code    = 0
    try:
       data = load(open(cloc_c, 'r'), Loader=Loader)
       c_files   = data['C']['nFiles']
       c_blank   = data['C']['blank']
       c_comment = data['C']['comment']
       c_code    = data['C']['code']
    except IOError:
        pass
    return [h_files, h_blank, h_comment, h_code,
            c_files, c_blank, c_comment, c_code]


def process_YAML_Fortran(cloc_f):
    """Counts lines of code in files listed.

    Keyword arguments:
    cloc_f -- YAML output file from cloc.pl for header files
    """
    from yaml import load, dump
    try:
        from yaml import CLoader as Loader, CDumper as Dumper
    except ImportError:
        from yaml import Loader, Dumper
    # Import YAML file and get relevant data
    data = load(open(cloc_f, 'r'), Loader=Loader)
    f77_files = 0
    f77_blank = 0
    f77_comment = 0
    f77_code = 0
    if 'Fortran 77' in data:
        f77_files   = data['Fortran 77']['nFiles']
        f77_blank   = data['Fortran 77']['blank']
        f77_comment = data['Fortran 77']['comment']
        f77_code    = data['Fortran 77']['code']
    f90_files   = data['Fortran 90']['nFiles']
    f90_blank   = data['Fortran 90']['blank']
    f90_comment = data['Fortran 90']['comment']
    f90_code    = data['Fortran 90']['code']
    return [f77_files + f90_files, f77_blank + f90_blank,
            f77_comment + f90_comment, f77_code + f90_code]


def print_header(plot_script):
    """Print header of matplotlib script generating bar chart.

    Keyword arguments:
    plot_script -- name of the plotting script
    """
    import sys
    import time
    now = time.strftime('%c')
    executable = sys.executable
    print('#!' + executable, file = plot_script)
    print('# Automatically generated on ' + now, file = plot_script)
    print('# Data obtained from the cloc.pl Perl script.', file = plot_script)
    print('# cloc script by Al Danial, available at http://cloc.sourceforge.net/', file = plot_script)
    print('# licensed under the GNU General Public License v2', file = plot_script)
    print('# (c) Roberto Di Remigio  <roberto.d.remigio@uit.no>', file = plot_script)
    print('# licensed under the GNU Lesser General Public License\n', file = plot_script)


def print_script(plot_script):
    # Read from file
    with open('@PROJECT_SOURCE_DIR@/doc/gfx/bar_chart.txt', 'r') as myfile:
        lines = myfile.readlines()
    script = '\n'
    for l in lines:
        script += l
    print(script, file = plot_script)


def print_data_CXX(data, tag, plot_script):
    """ Print data gathered from cloc.pl for C++ sources.

    Keyword arguments:
    data -- lines of code count
    tag  --  tag for the lines of code count data
    plot_script -- the plotting script file
    """
    print('save_root = \'@PROJECT_SOURCE_DIR@/doc/gfx\'\n', file = plot_script)
    print('tag = \'' + tag + '\'\n', file = plot_script)
    print('language        = \'C++\'', file = plot_script)
    print('nr_files_hpp    = '   + str(data[0]),        file = plot_script)
    print('nr_blanks_hpp   = '   + str(data[1]),        file = plot_script)
    print('nr_comments_hpp = '   + str(data[2]),        file = plot_script)
    print('nr_code_hpp     = '   + str(data[3]) + '\n', file = plot_script)
    print('nr_files_cpp    = '   + str(data[4]),        file = plot_script)
    print('nr_blanks_cpp   = '   + str(data[5]),        file = plot_script)
    print('nr_comments_cpp = '   + str(data[6]),        file = plot_script)
    print('nr_code_cpp     = '   + str(data[7]) + '\n', file = plot_script)
    # Sum stuff
    print('nr_files    = nr_files_hpp + nr_files_cpp',       file = plot_script)
    print('nr_blanks   = nr_blanks_hpp + nr_blanks_cpp',     file = plot_script)
    print('nr_comments = nr_comments_hpp + nr_comments_cpp', file = plot_script)
    print('nr_code     = nr_code_hpp + nr_code_cpp',         file = plot_script)
    print('annotation  = \'Library: \' + tag + \'\\nLanguage: \' + language + \'\\nFiles: \' + str(nr_files)',        file = plot_script)


def print_data_C(data, tag, plot_script):
    """ Print data gathered from cloc.pl for C sources.

    Keyword arguments:
    data -- lines of code count
    tag  --  tag for the lines of code count data
    plot_script -- the plotting script file
    """
    print('save_root = \'@PROJECT_SOURCE_DIR@/doc/gfx\'\n', file = plot_script)
    print('tag = \'' + tag + '\'\n', file = plot_script)
    print('language      = \'C\'', file = plot_script)
    print('nr_files_h    = '   + str(data[0]),        file = plot_script)
    print('nr_blanks_h   = '   + str(data[1]),        file = plot_script)
    print('nr_comments_h = '   + str(data[2]),        file = plot_script)
    print('nr_code_h     = '   + str(data[3]) + '\n', file = plot_script)
    print('nr_files_c    = '   + str(data[4]),        file = plot_script)
    print('nr_blanks_c   = '   + str(data[5]),        file = plot_script)
    print('nr_comments_c = '   + str(data[6]),        file = plot_script)
    print('nr_code_c     = '   + str(data[7]) + '\n', file = plot_script)
    # Sum stuff
    print('nr_files    = nr_files_h + nr_files_c',       file = plot_script)
    print('nr_blanks   = nr_blanks_h + nr_blanks_c',     file = plot_script)
    print('nr_comments = nr_comments_h + nr_comments_c', file = plot_script)
    print('nr_code     = nr_code_h + nr_code_c',         file = plot_script)
    print('annotation  = \'Library: \' + tag + \'\\nLanguage: \' + language + \'\\nFiles: \' + str(nr_files)',        file = plot_script)


def print_data_Fortran(data, tag, plot_script):
    """ Print data gathered from cloc.pl for Fortran sources.

    Keyword arguments:
    data -- lines of code count
    tag  --  tag for the lines of code count data
    plot_script -- the plotting script file
    """
    print('save_root = \'@PROJECT_SOURCE_DIR@/doc/gfx\'\n', file = plot_script)
    print('tag = \'' + tag + '\'\n', file = plot_script)
    print('language    = \'Fortran\'', file = plot_script)
    print('nr_files    = '   + str(data[0]),        file = plot_script)
    print('nr_blanks   = '   + str(data[1]),        file = plot_script)
    print('nr_comments = '   + str(data[2]),        file = plot_script)
    print('nr_code     = '   + str(data[3]) + '\n', file = plot_script)
    print('annotation  = \'Library: \' + tag + \'\\nLanguage: \' + language + \'\\nFiles: \' + str(nr_files)',        file = plot_script)

