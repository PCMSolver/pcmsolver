#!/usr/bin/env python

# This file is autogenerated by Autocmake v1.0.0-alpha-x http://autocmake.org
# Copyright (c) 2015-2018 by Radovan Bast, Roberto Di Remigio, Jonas Juselius, and contributors.

import os
import sys
assert sys.version_info >= (2, 6), 'Python >= 2.6 is required'

sys.path.insert(0, 'cmake')
from autocmake import configure
from autocmake.external import docopt


options = """
Usage:
  ./setup.py [options] [<builddir>]
  ./setup.py (-h | --help)

Options:
  --fc=<FC>                              Fortran compiler [default: gfortran].
  --extra-fc-flags=<EXTRA_FCFLAGS>       Extra Fortran compiler flags [default: ''].
  --cc=<CC>                              C compiler [default: gcc].
  --extra-cc-flags=<EXTRA_CFLAGS>        Extra C compiler flags [default: ''].
  --cxx=<CXX>                            C++ compiler [default: g++].
  --extra-cxx-flags=<EXTRA_CXXFLAGS>     Extra C++ compiler flags [default: ''].
  --ccache=<USE_CCACHE>                  Toggle use of ccache <ON/OFF> [default: ON].
  --add-definitions=<STRING>             Add preprocesor definitions [default: ''].
  --coverage                             Enable code coverage [default: False].
  --int64                                Enable 64bit integers [default: False].
  --omp                                  Enable OpenMP parallelization [default: False].
  --python=<PYTHON_INTERPRETER>          The Python interpreter (development version) to use. [default: ''].
  --fbindings=<ENABLE_Fortran_API>       Enable compilation of Fortran 90 API bindings <ON/OFF> [default: ON].
  --boost-headers=<BOOST_INCLUDEDIR>     Include directories for Boost [default: ''].
  --boost-libraries=<BOOST_LIBRARYDIR>   Library directories for Boost [default: ''].
  --build-boost=<FORCE_CUSTOM_BOOST>     Deactivate Boost detection and build on-the-fly <ON/OFF> [default: OFF].
  --static                               Create only the static library [default: False].
  --eigen=<EIGEN3_ROOT>                  Root directory for Eigen3 [default: ''].
  --type=<TYPE>                          Set the CMake build type (debug, release, relwithdebinfo, minsizerel) [default: debug].
  --generator=<STRING>                   Set the CMake build system generator [default: Unix Makefiles].
  --show                                 Show CMake command and exit.
  --cmake-executable=<CMAKE_EXECUTABLE>  Set the CMake executable [default: cmake].
  --cmake-options=<STRING>               Define options to CMake [default: ''].
  --prefix=<PATH>                        Set the install path for make install.
  <builddir>                             Build directory.
  -h --help                              Show this screen.
"""


def gen_cmake_command(options, arguments):
    """
    Generate CMake command based on options and arguments.
    """
    command = []
    command.append(arguments['--cmake-executable'])
    command.append('-DCMAKE_Fortran_COMPILER={0} -DEXTRA_FCFLAGS="{1}"'.format(arguments['--fc'], arguments['--extra-fc-flags']))
    command.append('-DCMAKE_C_COMPILER={0} -DEXTRA_CFLAGS="{1}"'.format(arguments['--cc'], arguments['--extra-cc-flags']))
    command.append('-DCMAKE_CXX_COMPILER={0} -DEXTRA_CXXFLAGS="{1}"'.format(arguments['--cxx'], arguments['--extra-cxx-flags']))
    command.append('-DUSE_CCACHE={0}'.format(arguments['--ccache']))
    command.append('-DPREPROCESSOR_DEFINITIONS="{0}"'.format(arguments['--add-definitions']))
    command.append('-DENABLE_CODE_COVERAGE={0}'.format(arguments['--coverage']))
    command.append('-DENABLE_64BIT_INTEGERS={0}'.format(arguments['--int64']))
    command.append('-DENABLE_OPENMP={0}'.format(arguments['--omp']))
    command.append('-DPYTHON_INTERPRETER="{0}"'.format(arguments['--python']))
    command.append('-DENABLE_Fortran_API={0}'.format(arguments['--fbindings']))
    command.append('-DBOOST_INCLUDEDIR="{0}"'.format(arguments['--boost-headers']))
    command.append('-DBOOST_LIBRARYDIR="{0}"'.format(arguments['--boost-libraries']))
    command.append('-DFORCE_CUSTOM_BOOST={0}'.format(arguments['--build-boost']))
    command.append('-DBOOST_MINIMUM_REQUIRED="1.54.0"')
    command.append('-DBOOST_COMPONENTS_REQUIRED=""')
    command.append('-DSTATIC_LIBRARY_ONLY={0}'.format(arguments['--static']))
    command.append('-DEIGEN3_ROOT="{0}"'.format(arguments['--eigen']))
    command.append('-DCMAKE_BUILD_TYPE={0}'.format(arguments['--type']))
    command.append('-G"{0}"'.format(arguments['--generator']))
    if arguments['--cmake-options'] != "''":
        command.append(arguments['--cmake-options'])
    if arguments['--prefix']:
        command.append('-DCMAKE_INSTALL_PREFIX="{0}"'.format(arguments['--prefix']))

    return ' '.join(command)


# parse command line args
try:
    arguments = docopt.docopt(options, argv=None)
except docopt.DocoptExit:
    sys.stderr.write('ERROR: bad input to {0}\n'.format(sys.argv[0]))
    sys.stderr.write(options)
    sys.exit(-1)


# use extensions to validate/post-process args
if configure.module_exists('extensions'):
    import extensions
    arguments = extensions.postprocess_args(sys.argv, arguments)


root_directory = os.path.dirname(os.path.realpath(__file__))


build_path = arguments['<builddir>']


# create cmake command
cmake_command = '{0} -H{1}'.format(gen_cmake_command(options, arguments), root_directory)


# run cmake
configure.configure(root_directory, build_path, cmake_command, arguments['--show'])
