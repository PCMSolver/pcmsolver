/* pcmsolver_copyright_start */
/*
 *     PCMSolver, an API for the Polarizable Continuum Model
 *     Copyright (C) 2013 Roberto Di Remigio, Luca Frediani and contributors
 *
 *     This file is part of PCMSolver.
 *
 *     PCMSolver is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     PCMSolver is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with PCMSolver.  If not, see <http://www.gnu.org/licenses/>.
 *
 *     For information on the complete list of contributors to the
 *     PCMSolver API, see: <http://pcmsolver.github.io/pcmsolver-doc>
 */
/* pcmsolver_copyright_end */

#include "catch.hpp"

#include <cmath>
#include <iostream>
#include <iomanip>
#include <limits>

#include "Config.hpp"

#include <Eigen/Core>

#include "cnpy.hpp"
#include "DerivativeTypes.hpp"
#include "IntegratorTypes.hpp"
#include "Element.hpp"
#include "GePolCavity.hpp"
#include "CollocationIntegrator.hpp"
#include "PhysicalConstants.hpp"
#include "SphericalDiffuse.hpp"
#include "TestingMolecules.hpp"
#include "UniformDielectric.hpp"
#include "Vacuum.hpp"

SCENARIO("A collocation integrator with approximate diagonal elements", "[bi_operators][bi_operators_collocation]")
{
    GIVEN("A GePol cavity for a single sphere in the origin")
    {
        double radius = 1.44;
        Molecule molec = dummy<0>(1.44 / convertBohrToAngstrom);
        double area = 10.0;
        GePolCavity cavity = GePolCavity(molec, area, 0.0, 100.0);

        /*! \class CollocationIntegrator
         *  \test \b CollocationIntegratorTest_vacuum tests the evaluation by collocation of the vacuum matrix representations of S and D
         */
        WHEN("the vacuum Green's function is used")
        {
            Vacuum<AD_directional, CollocationIntegrator> gf;
            THEN("the matrix elements of S are")
            {
                Eigen::MatrixXd S_results = gf.singleLayer(cavity.elements());
                cnpy::NpyArray raw_S_ref = cnpy::npy_load("@CMAKE_CURRENT_LIST_DIR@/vacuum_S_collocation.npy");
                int dim_read = raw_S_ref.shape[0];
                Eigen::MatrixXd S_reference = Eigen::MatrixXd::Zero(dim_read, dim_read);
                S_reference = getFromRawBuffer<double>(dim_read, dim_read, raw_S_ref.data);
                for (size_t i = 0; i < cavity.size(); ++i) {
                    for (size_t j = 0; j < cavity.size(); ++j) {
                        REQUIRE(S_reference(i, j) == Approx(S_results(i, j)));
                    }
                }
            }
            AND_THEN("the matrix elements of D are")
            {
                Eigen::MatrixXd D_results = gf.doubleLayer(cavity.elements());
                cnpy::NpyArray raw_D_ref = cnpy::npy_load("@CMAKE_CURRENT_LIST_DIR@/vacuum_D_collocation.npy");
                int dim_read = raw_D_ref.shape[0];
                Eigen::MatrixXd D_reference = Eigen::MatrixXd::Zero(dim_read, dim_read);
                D_reference = getFromRawBuffer<double>(dim_read, dim_read, raw_D_ref.data);
                for (size_t i = 0; i < cavity.size(); ++i) {
                    for (size_t j = 0; j < cavity.size(); ++j) {
                        REQUIRE(D_reference(i, j) == Approx(D_results(i, j)));
                    }
                }
            }
        }

        /*! \class CollocationIntegrator
         *  \test \b CollocationIntegratorTest_uniformdielectric tests the evaluation by collocation of the uniform dielectric matrix representations of S and D
         */
        AND_WHEN("the uniform dielectric Green's function is used")
        {
            double epsilon = 80.0;
            UniformDielectric<AD_directional, CollocationIntegrator> gf(epsilon);
            THEN("the matrix elements of S are")
            {
                Eigen::MatrixXd S_results = gf.singleLayer(cavity.elements());
                cnpy::NpyArray raw_S_ref = cnpy::npy_load("@CMAKE_CURRENT_LIST_DIR@/uniformdielectric_S_collocation.npy");
                int dim_read = raw_S_ref.shape[0];
                Eigen::MatrixXd S_reference = Eigen::MatrixXd::Zero(dim_read, dim_read);
                S_reference = getFromRawBuffer<double>(dim_read, dim_read, raw_S_ref.data);
                for (size_t i = 0; i < cavity.size(); ++i) {
                    for (size_t j = 0; j < cavity.size(); ++j) {
                        REQUIRE(S_reference(i, j) == Approx(S_results(i, j)));
                    }
                }
            }
            AND_THEN("the matrix elements of D are")
            {
                Eigen::MatrixXd D_results = gf.doubleLayer(cavity.elements());
                cnpy::NpyArray raw_D_ref = cnpy::npy_load("@CMAKE_CURRENT_LIST_DIR@/uniformdielectric_D_collocation.npy");
                int dim_read = raw_D_ref.shape[0];
                Eigen::MatrixXd D_reference = Eigen::MatrixXd::Zero(dim_read, dim_read);
                D_reference = getFromRawBuffer<double>(dim_read, dim_read, raw_D_ref.data);
                for (size_t i = 0; i < cavity.size(); ++i) {
                    for (size_t j = 0; j < cavity.size(); ++j) {
                        REQUIRE(D_reference(i, j) == Approx(D_results(i, j)));
                    }
                }
            }
        }

        /*! \class CollocationIntegrator
         *  \test \b CollocationIntegratorTest_tanhsphericaldiffuse tests the evaluation by collocation of the spherical diffuse matrix representations of S and D
         */
        AND_WHEN("the spherical diffuse with a tanh profile Green's function is used")
        {
            double epsilon = 80.0;
            double width = 5.0;
            double sphereRadius = 100.0;
            SphericalDiffuse<CollocationIntegrator, OneLayerTanh> gf(epsilon, epsilon, width, sphereRadius, Eigen::Vector3d::Zero(), 3);
            THEN("the matrix elements of S are")
            {
                Eigen::MatrixXd S_results = gf.singleLayer(cavity.elements());
                cnpy::NpyArray raw_S_ref = cnpy::npy_load("@CMAKE_CURRENT_LIST_DIR@/tanhsphericaldiffuse_S_collocation.npy");
                int dim_read = raw_S_ref.shape[0];
                Eigen::MatrixXd S_reference = Eigen::MatrixXd::Zero(dim_read, dim_read);
                S_reference = getFromRawBuffer<double>(dim_read, dim_read, raw_S_ref.data);
                for (size_t i = 0; i < cavity.size(); ++i) {
                    for (size_t j = 0; j < cavity.size(); ++j) {
                        REQUIRE(S_reference(i, j) == Approx(S_results(i, j)));
                    }
                }
            }
            AND_THEN("the matrix elements of D are")
            {
                Eigen::MatrixXd D_results = gf.doubleLayer(cavity.elements());
                cnpy::NpyArray raw_D_ref = cnpy::npy_load("@CMAKE_CURRENT_LIST_DIR@/tanhsphericaldiffuse_D_collocation.npy");
                int dim_read = raw_D_ref.shape[0];
                Eigen::MatrixXd D_reference = Eigen::MatrixXd::Zero(dim_read, dim_read);
                D_reference = getFromRawBuffer<double>(dim_read, dim_read, raw_D_ref.data);
                for (size_t i = 0; i < cavity.size(); ++i) {
                    for (size_t j = 0; j < cavity.size(); ++j) {
                        REQUIRE(D_reference(i, j) == Approx(D_results(i, j)));
                    }
                }
            }
        }
    }
}
