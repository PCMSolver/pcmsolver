/* pcmsolver_copyright_start */
/*
 *     PCMSolver, an API for the Polarizable Continuum Model
 *     Copyright (C) 2013 Roberto Di Remigio, Luca Frediani and contributors
 *     
 *     This file is part of PCMSolver.
 *     
 *     PCMSolver is free software: you can redistribute it and/or modify       
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *     
 *     PCMSolver is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *     
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with PCMSolver.  If not, see <http://www.gnu.org/licenses/>.
 *     
 *     For information on the complete list of contributors to the
 *     PCMSolver API, see: <http://pcmsolver.github.io/pcmsolver-doc>
 */
/* pcmsolver_copyright_end */

#define BOOST_TEST_MODULE GePolCavityD2hAddTest

#include <boost/test/unit_test.hpp>
#include <boost/test/floating_point_comparison.hpp>

#include <vector>
#include <cmath>

#include "Config.hpp"

#include <Eigen/Dense>

#include <boost/filesystem.hpp>

#include "GePolCavity.hpp"
#include "PhysicalConstants.hpp"
#include "Symmetry.hpp"

namespace fs = boost::filesystem;

struct GePolCavityD2hAddTest {
    GePolCavity cavity;
    GePolCavityD2hAddTest() { SetUp(); }
    void SetUp() {
        Eigen::Vector3d	C1(0.0000000000,  0.0000000000,  1.2578920000);
        Eigen::Vector3d	C2(0.0000000000,  0.0000000000, -1.2578920000);
        Eigen::Vector3d	H1(0.0000000000,  1.7454620000,  2.3427160000);
        Eigen::Vector3d	H2(0.0000000000, -1.7454620000,  2.3427160000);
        Eigen::Vector3d	H3(0.0000000000,  1.7454620000, -2.3427160000);
        Eigen::Vector3d	H4(0.0000000000, -1.7454620000, -2.3427160000);
        std::vector<Sphere> spheres;
        double radiusC = (1.70 * 1.20) / convertBohrToAngstrom;
        double radiusH = (1.20 * 1.20) / convertBohrToAngstrom;
        Sphere sph1(C1, radiusC);
        Sphere sph2(H1, radiusH);
        Sphere sph3(H2, radiusH);
        Sphere sph4(C2, radiusC);
        Sphere sph5(H3, radiusH);
        Sphere sph6(H4, radiusH);
        spheres.push_back(sph1);
        spheres.push_back(sph2);
        spheres.push_back(sph3);
        spheres.push_back(sph4);
        spheres.push_back(sph5);
        spheres.push_back(sph6);
        double area = 0.2 / convertBohr2ToAngstrom2;
        double probeRadius = 1.385 / convertBohrToAngstrom;
        // Addition of spheres is enabled, but will not happen in this particular case
        double minRadius = 0.2 / convertBohrToAngstrom;
        // D2h as generated by Oxy, Oxz, Oyz
        Symmetry pGroup = buildGroup(3, 4, 2, 1);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, pGroup);
        cavity.saveCavity("c2h4_d2h.npz");
        fs::rename("PEDRA.OUT", "PEDRA.OUT.d2h");
        fs::rename("cavity.off", "cavity.off.d2h");
    }
};

/*! \class GePolCavity
 *  \test \b GePolCavityD2hAddTest_size tests GePol cavity size for C2H4 in D2h symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(size, GePolCavityD2hAddTest)
{
    int size = 576;
    int actualSize = cavity.size();
    BOOST_REQUIRE_EQUAL(size, actualSize);
}

/*! \class GePolCavity
 *  \test \b GePolCavityD2hAddTest_irreducible_size tests GePol cavity irreducible size for C2H4 in D2h symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(irreducible_size, GePolCavityD2hAddTest)
{
    int size = 72;
    int actualSize = cavity.irreducible_size();
    BOOST_REQUIRE_EQUAL(size, actualSize);
}

/*! \class GePolCavity
 *  \test \b GePolCavityD2hAddTest_area tests GePol cavity surface area for C2H4 in D2h symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(area, GePolCavityD2hAddTest)
{
    double area = 281.81993683500656;
    double actualArea = cavity.elementArea().sum();
    BOOST_REQUIRE_CLOSE(area, actualArea, 1.0e-10);
}

/*! \class GePolCavity
 *  \test \b GePolCavityD2hAddTest_volume tests GePol cavity volume for C2H4 in D2h symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(volume, GePolCavityD2hAddTest)
{
    double volume = 406.54737252764619;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    BOOST_REQUIRE_CLOSE(volume, actualVolume, 1.0e-10);
}
